name: Deploy

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: '-rlgoDzvc -i'
          SOURCE: './'
          REMOTE_HOST: ${{ vars.SSH_HOST }}
          REMOTE_USER: ${{ vars.SSH_USER }}
          SCRIPT_AFTER: |
            whoami
            ls -al
            echo $RSYNC_STDOUT
            echo GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" > .env
            echo GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" >> .env
            echo NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" >> .env
            echo POSTGRES_PRISMA_URL="postgres://${{ secrets.POSTGRES_USERNAME }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/mydb?pgbouncer=true&connect_timeout=15" >> .env
            echo POSTGRES_URL="postgres://${{ secrets.POSTGRES_USERNAME }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/mydb" >> .env
            echo POSTGRES_URL_NON_POOLING="postgres://${{ secrets.POSTGRES_USERNAME }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/mydb" >> .env

  setup:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v3
      - name: Run playbook
        uses: dawidd6/action-ansible-playbook@v2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        with:
          playbook: ansible/main.yml
          directory: ./
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          inventory: |
            [webservers]
            ${{ vars.SSH_HOST }}  ansible_user=ubuntu
          # Optional, encrypted vault password
          # vault_password: ${{ secrets.VAULT_PASSWORD }}
          options: |
            --ssh-extra-args "-o StrictHostKeyChecking=no"
            --extra-vars domain_name=${{ vars.SSH_HOST }}
            --extra-vars letsencrypt_email=${{ vars.LETSENCRYPT_EMAIL }}
            --extra-vars postgres_password=${{ secrets.POSTGRES_PASSWORD }}
            --extra-vars postgres_username=${{ secrets.POSTGRES_USERNAME }}
            --verbose
  build:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - run: yarn
      - run: yarn build

      - name: Deploy to server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: '-rlgoDzvc -i'
          SOURCE: './'
          REMOTE_HOST: ${{ vars.SSH_HOST }}
          REMOTE_USER: ${{ vars.SSH_USER }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
    steps:
      - name: Executing remote SSH commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            pm2 startOrReload ecosystem.config.js
